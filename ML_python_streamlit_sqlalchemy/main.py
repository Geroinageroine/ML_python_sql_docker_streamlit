import pandas as pd

# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫–∏)
import re

# –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞ –≤–º–µ—Å—Ç–æ JSON –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ read_csv, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫ # –¢—É—Ç –Ω–µ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –ø–æ—ç—Ç–æ–º—É –º–µ—Ç–æ–¥—ã json –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ª—É—á—à–µ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å eval() P.S. –∫—Ç–æ –±—ã –º–æ–≥ –ø–æ–¥—É–º–∞—Ç—å ü§î
from ast import literal_eval

import os

# –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö —Å–ª–æ–≤ –≤ –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
from wordcloud import WordCloud, STOPWORDS
import matplotlib.pylab as plt

import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestClassifier

import streamlit as st
import time

# * –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ hh.ru
import hh_parser as hhp

# * –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î MySQL –≤ —Ç–∞–±–ª–∏—Ü—É vacantion
import db_connect_append


def literal_converter(val):
    # replace first val with '' or some other null identifier if required
    return None if val == "" else literal_eval(val)


@st.cache_data
def download_data(job_number: int = 1, date_file: str = "date.txt") -> pd.DataFrame:
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä—Å–∏–º —Ñ–∞–π–ª csv —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —Ä–∞–±–æ—Ç—ã: 1 - "Data Analyst" 2 - "Data Scientist" 3 - "Data Engineer" """
    # –£–∑–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –∫–æ–≥–¥–∞ –ø–∞—Ä—Å–∏–ª–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
    with open(date_file, "r") as f:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
        if os.stat(date_file).st_size != 0:
            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É
            last_line = f.readlines()[-1]
            last_saved_date = last_line[12:22]
        else:
            last_saved_date = "2024-12-01"
    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 7 –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö, —Ç–æ –º—ã –ø–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ
    if hhp.days_between(last_saved_date) > 7:
        csv_name = hhp.hh_parser(job_number)
        df = pd.read_csv(
            csv_name,
            converters={
                "area": literal_converter,
                "salary": literal_converter,
                "snippet": literal_converter,
                "professional_roles": literal_converter,
                "experience": literal_converter,
            },
        )
        with open(date_file, "w") as f:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–∞–π–ª
            f.write(csv_name)
    else:
        df = pd.read_csv(
            last_line,
            converters={
                "area": literal_converter,
                "salary": literal_converter,
                "snippet": literal_converter,
                "professional_roles": literal_converter,
                "experience": literal_converter,
            },
        )
    return df


def begin_dataset(df: pd.DataFrame) -> dict:
    """–ê–Ω–∞–ª–∏–∑ –≤ Pandas

    –°–æ–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –±—É–¥—É—Ç c–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ù–∞–ø—Ä–∏–º–µ—Ä: –≥–æ—Ä–æ–¥; –ø–æ–∑–∏—Ü–∏—è; –≤–∏–ª–∫–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã; –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –æ–¥–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è     –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.

    –ò–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –≤—ã–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—É—é –Ω–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —É–¥–∞–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏

    –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:
    - 'id' -
    - 'name' - –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã,
    - 'month', 'year' - –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è,
    - 'city' - –≥–æ—Ä–æ–¥,
    - 'experience_year' - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã,
    - 'salary_from' - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞,
    - 'salary_to' - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞,
    - 'salary_avg' - —Å—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞,
    - 'role' - –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã,
    - 'responsibility' - —Å–∫–∏–ª–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ç–∏–ø–∞ –ü–∏—Ç–æ–Ω–∞ –∏ –≠–∫—Å–µ–ª—è
    """

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –Ω–∞–º —Å—Ç–æ–ª–±—Ü—ã
    col = [
        "id",
        "name",
        "area",
        "salary",
        "published_at",
        "snippet",
        "professional_roles",
        "experience",
    ]
    df = df[col]
    return df


def analysis_pandas_city(df: pd.DataFrame) -> pd.DataFrame:
    """–û—Å—Ç–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞"""
    df["city"] = str()
    for i in range(len(df.area)):
        df.loc[i, "city"] = df.loc[i, "area"]["name"]
    df = df.drop(["area"], axis=1)
    # –û—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –ú–æ—Å–∫–≤—É
    df = df.query("city == '–ú–æ—Å–∫–≤–∞'")
    df = df.drop(columns=["city"], axis=1).reset_index(drop=True)
    return df


def analysis_pandas_salary(
    df: pd.DataFrame, avg_salary_in_Moscow: int = 161000
) -> pd.DataFrame:
    """–°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∑–∞—Ä–ø–ª–∞—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏ —Å—Ä–µ–¥–Ω—è—è"""
    df["salary_from"] = int()
    df["salary_to"] = int()
    df["salary_avg"] = int()
    for i in range(len(df.salary)):
        if df.loc[i, "salary"] is not None and df.loc[i, "salary"]["currency"] == "RUR":
            if df.loc[i, "salary"]["from"] is not None:
                df.loc[i, "salary_from"] = df.loc[i, "salary"]["from"]
            if df.loc[i, "salary"]["to"] is not None:
                df.loc[i, "salary_to"] = df.loc[i, "salary"]["to"]

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –∑–∞–ø—Ä–ª–∞—Ç—É
    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (–∑–Ω–∞—á–µ–Ω–∏–µ = 0), —Ç–æ –º—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–Ω—É –∏–∑ –∑–∞—Ä–ø–ª–∞—Ç
    if_not_fork = (df.salary_from == 0) | (df.salary_to == 0)
    df.loc[if_not_fork, "salary_avg"] = (
        df.loc[if_not_fork, "salary_from"] + df.loc[if_not_fork, "salary_to"]
    )
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –æ–±–µ –∑–∞—Ä–ø–ª–∞—Ç—ã, —Ç–æ –º—ã –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É
    if_have_fork = (df.salary_from != 0) & (df.salary_to != 0)
    df.loc[if_have_fork, "salary_avg"] = (
        df.loc[if_have_fork, "salary_from"] + df.loc[if_have_fork, "salary_to"]
    )
    df = df.drop(["salary"], axis=1)

    df["salary_larger_then_avg"] = df.salary_avg > avg_salary_in_Moscow
    df["salary_larger_then_avg"] = df["salary_larger_then_avg"].astype(int)
    return df


def analysis_pandas_date(df: pd.DataFrame) -> pd.DataFrame:
    """–û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≥–æ–¥ –∏ –º–µ—Å—è—Ü"""
    df["published_at"] = pd.to_datetime(df.published_at)
    df["month"] = df.published_at.dt.month
    df["year"] = df.published_at.dt.year
    df = df.drop(["published_at"], axis=1)
    return df


def analysis_pandas_experience(df: pd.DataFrame) -> pd.DataFrame:
    """–û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –≥–æ–¥–∞—Ö"""
    df["experience_year"] = int()
    for i in range(len(df.experience)):
        # ? –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –Ω–∞ –ø—É—Å—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç "" –¥–æ ""
        exp = re.sub("[–∞-—è–ê-–Ø]", "", df.loc[i, "experience"]["name"]).split()
        # ? –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ - –≤—Å–µ —Ä–∞–≤–Ω–æ –∂–µ –æ–ø—ã—Ç–∞ –≤ —Ä–∞–±–æ—Ç–µ –Ω–µ—Ç –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã —Ç—É–ø–æ–π :)
        if len(exp) > 0:
            df.loc[i, "experience_year"] = int(exp[0])
        else:
            # ? –ï—Å–ª–∏ –æ–ø—ã—Ç–∞ –Ω–µ –Ω—É–∂–Ω–æ —Ç–æ –æ—Ç–ª–∏—á–Ω–æ —Å—Ç–∞–≤–∏–º 0
            df.loc[i, "experience_year"] = 0
    df = df.drop(["experience"], axis=1)
    return df


def hh_worldcloud(
    skills: pd.Series,
    stopwords_list: list[str] = ["responsibility", "requirement"],
    deep: int = 120,
) -> WordCloud:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –û–±–ª–∞–∫–∞ —Å–ª–æ–≤ –≤ WorldCloud

    –ù–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞–µ—Ç—Å—è
    skills: pd.Series - —Å–µ—Ä–∏—è —Å–ª–æ–≤ –∏–∑ –Ω–∏—Ö –∏—â–µ–º —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ–º—ã–µ —Å–ª–æ–≤–∞
    stopwords_list: list[str] - –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –Ω–∞–º –æ–±—ã—á–Ω–æ —ç—Ç–æ —Å–ª–æ–≤–∞-—Å–≤—è–∑–∫–∏ —Ç–∏–ø–æ —è, —Ç—ã –∏ —Ç.–¥.
    deep: int - —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –±—É–¥–µ—Ç –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ,
    –ù–∞ –≤—ã—Ö–æ–¥ –≤—ã–¥–∞–µ—Ç —Ñ–∞–π–ª png —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ —Å—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "–æ–±–ª–∞–∫–æ —Å–ª–æ–≤"
    """

    # WordCloud —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å—Ç—Ä–æ–∫–æ–π, —Ç–∞–∫ —á—Ç–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
    # pd.Series –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ª–∏—Å—Ç
    word = skills.dropna().to_list()
    # List –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
    cloud = ""
    for x in list(word):
        cloud += x + ","

    # —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å—Ç–æ–ø —Å–ª–æ–≤ –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ stopwords = STOPWORDS.update(["https", "co", "RT"])
    stopwords = STOPWORDS.update(stopwords_list)
    # –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø —Å–ª–æ–≤ {'most', "she'll", 'doing' ...}
    stopwords = STOPWORDS
    wordcloud = WordCloud(
        width=2000,
        height=2000,
        stopwords=stopwords,
        min_font_size=deep,
        background_color="white",
    ).generate(cloud)

    return wordcloud


def analysis_pandas_skills(df: pd.DataFrame) -> dict:
    """–í—ã–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ reponsibility - —Å–∫–∏–ª–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä Python, SQL ...)"""
    df["responsibility"] = str()
    for i in range(len(df.snippet)):
        str_responsibility = df.loc[i, "snippet"]["responsibility"]
        if str_responsibility is not None:
            skills = (
                re.sub("[^a-zA-Z]", " ", df.loc[i, "snippet"]["responsibility"])
                .replace("highlighttext", "")
                .split()
            )
            # re.sub - –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–µ –∞–Ω–≥–ª —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø—Ä–æ–±–µ–ª—ã, —Ç–∞–∫ –∫–∞–∫ –≤ –µ—Å—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∏     —Ç–∞–∫–∂–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–Ω–∞–∫–∏ –ø–µ—Ä–ø–∏–Ω–∞–Ω–∏—è;
            # replace - —É–¥–∞–ª—è–µ–º <highlighttext> - –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç html —Å–∏–Ω—Ç–∞–∫—Å–∏—Å

        df.loc[i, "responsibility"] = ",".join(skills)
    df = df.drop(["snippet"], axis=1)

    # –°—Ç—Ä–æ–∏–º –û–±–ª–∞–∫–æ —Å–ª–æ–≤ –≤ WorldCloud
    # —Å—Ç–æ–ø —Å–ª–æ–≤–∞ –ø–∞—Ä–∞–∑–∏—Ç—ã, —Å–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –Ω–∞—à–µ–π —Ç–µ–º–µ
    stopwords_list = [
        "WhatsApp",
        "Zoom",
    ]

    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ wordcloud —Å –≤–µ—Å–∞–º–∏
    wordcloud = hh_worldcloud(
        skills=df.responsibility, stopwords_list=stopwords_list, deep=20
    )

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–∫–∏–ª–ª—ã –≤ —á–∏—Å–ª–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤–µ—Å–∞ —Å–ª–æ–≤

    # –í –∫–æ–ª–æ–Ω–∫–µ —Å–æ —Å–∫–∏–ª–ª–∞–º–∏ df.responsibility –º—ã –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞, –∫–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ–º—ã–µ —Å–∫–∏–ª–ª—ã
    for i in range(len(df.responsibility)):
        weight = 0
        if df.loc[i, "responsibility"] != "":
            # * –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏—Ö –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 0.
            # * –°–º–æ—Ç—Ä–∏–º –ø–æ —Å–ª–æ–≤–∞–º –∫–∞–∫–æ–π —É –Ω–µ–≥–æ –≤–µ—Å –∏–∑ wordcloud.words_
            for word in df.loc[i, "responsibility"].split(sep=","):
                # –°–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –∏—Ö –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏ –Ω–µ –¥–∞–µ–º –Ω–∏–∫–∞–∫–æ–≥–æ –≤–µ—Å–∞ —ç—Ç–æ–º—É —Å–ª–æ–≤—É
                if word in wordcloud.words_:
                    # –°—É–º–º–∏—Ä—É–µ–º –≤–µ—Å–∞ –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
                    weight += wordcloud.words_[word]
            df.loc[i, "responsibility"] = round(weight, 3)
        else:
            df.loc[i, "responsibility"] = 0
    return df, wordcloud


def value_skills(list_skills: list, wordcloud: WordCloud) -> float:
    """–°–º–æ—Ç—Ä–∏–º –ø–æ —Å–ª–æ–≤–∞–º –∫–∞–∫–æ–π —É –Ω–µ–≥–æ –≤–µ—Å –∏–∑ wordcloud.words_"""
    weight = 0
    for word in list_skills:
        # –°–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –∏—Ö –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏ –Ω–µ –¥–∞–µ–º –Ω–∏–∫–∞–∫–æ–≥–æ –≤–µ—Å–∞ —ç—Ç–æ–º—É —Å–ª–æ–≤—É
        if word in wordcloud.words_:
            # –ø–æ–ª—É—á–∞–µ–º –≤–µ—Å–∞ –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
            weight += wordcloud.words_[word]
    return weight


def analysis_pandas_role(df: pd.DataFrame) -> pd.DataFrame:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º IT —Ä–æ–ª—å: 0 - —Å—Ç–∞–∂–µ—Ä, 1 - –î–∂—É–Ω, 2 - –ú–∏–¥–ª, 3 - –°–µ–Ω—å–æ—Ä, 4 - –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"""
    # ? –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —É—Ä–æ–≤–Ω–µ–º —Ä–∞–±–æ—Ç—ã 0 - —Å—Ç–∞–∂–µ—Ä, 1 - –î–∂—É–Ω, 2 - –ú–∏–¥–ª, 3 - –°–µ–Ω—å–æ—Ä, 4 - –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    df["role"] = int()
    # –í—Å–µ–º –¥–∞–¥–∏–º —É—Ä–æ–≤–µ–Ω—å 4 "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
    df["role"] = 4

    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    df.loc[df.name.str.contains("–°—Ç–∞–∂|—Å—Ç–∞–∂|Intern|intern"), "role"] = 0
    df.loc[df.name.str.contains("–ú–ª–∞–¥|–º–ª–∞–¥|Junior|junior"), "role"] = 1
    df.loc[df.name.str.contains("–°—Ä–µ–¥|—Å—Ä–µ–¥|Middle|middle"), "role"] = 2
    df.loc[
        df.name.str.contains(
            "–°—Ç–∞—Ä—à|—Å—Ç–∞—Ä—à|Senior|senior|–°–µ–Ω—å–æ—Ä|–¢–∏–º–ª–∏–¥|–ü—Ä–æ–¥–∂–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä|–†—É–∫–æ–≤|–î–∏—Ä–µ–∫—Ç–æ—Ä"
        ),
        "role",
    ] = 3
    return df


def role_name(df: pd.DataFrame):
    """–°—Ç—Ä–æ–∫–æ–≤—ã–µ –∏–º–µ–Ω–∞ IT —Ä–æ–ª–∏: 0 - —Å—Ç–∞–∂–µ—Ä, 1 - –î–∂—É–Ω, 2 - –ú–∏–¥–ª, 3 - –°–µ–Ω—å–æ—Ä, 4 - –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"""
    df["role_name"] = str()
    df.loc[df.role == 0, "role_name"] = "0 —Å—Ç–∞–∂–µ—Ä"
    df.loc[df.role == 1, "role_name"] = "1 –î–∂—É–Ω"
    df.loc[df.role == 2, "role_name"] = "2 –ú–∏–¥–ª"
    df.loc[df.role == 3, "role_name"] = "3 –°–µ–Ω—å–æ—Ä"
    df.loc[df.role == 4, "role_name"] = "4 –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
    return df


def final_dataset(df: pd.DataFrame) -> dict:
    """–ö–æ–Ω–µ—á–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç"""
    final_col = [
        "salary_avg",
        "month",
        "year",
        "responsibility",
        "experience_year",
        "role",
        "salary_larger_then_avg",
    ]

    df = df[final_col].query("salary_avg > 0").reset_index(drop=True)
    is_define = df.query("role in [0,1,2,3] & salary_avg > 0").reset_index(drop=True)
    return df, is_define


@st.cache_data
def model_it_role(is_define: pd.DataFrame) -> dict:
    """
    –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ò–¢-—Ä–æ–ª–∏. –û–±—É—á–∞–µ–º —Å –ø–æ–º–æ—â—å—é –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
    –ú—ã –Ω–µ –∑–Ω–∞–µ–º –∫ –∫–æ–º—É –æ—Ç–Ω–µ—Å—Ç–∏ 4 —Ç–∏–ø —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.
    """

    y_role = is_define["role"]
    X_role = is_define.drop(["role"], axis=1)

    X_train_role, X_test_role, y_train_role, y_test_role = train_test_split(
        X_role, y_role, test_size=0.20, random_state=42
    )
    model_role = LinearRegression().fit(X_train_role, y_train_role)
    y_pred_role = model_role.predict(X_test_role)
    score_predict_it_role = model_role.score(X_test_role, y_test_role)
    return model_role, X_test_role, y_test_role, y_pred_role, score_predict_it_role


@st.cache_data
def model_salary(df_final: pd.DataFrame) -> dict:
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–ø –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ —Å—Ä–µ–¥–Ω–µ–π –ø–æ –ú–æ—Å–∫–≤–µ.
    –û–±—É—á–∞–µ–º —Å –ø–æ–º–æ—â—å—é –°–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞ —Å —Å–µ—Ç–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
    # —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å –Ω—É–∂–Ω—ã–º–∏ —Ñ–∏—á–∞–º–∏ –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    y_salary = df_final.salary_larger_then_avg
    X_salary = df_final.drop(["salary_larger_then_avg", "salary_avg"], axis=1)

    X_train_salary, X_test_salary, y_train_salary, y_test_salary = train_test_split(
        X_salary, y_salary, test_size=0.20, random_state=42
    )

    model = RandomForestClassifier()
    parametrs = {
        "max_depth": range(2, 5),
        "min_samples_split": range(2, 4),
        "min_samples_leaf": range(2, 4),
    }

    grid_search_cv = GridSearchCV(model, parametrs, cv=5)
    grid_search_cv.fit(X_train_salary, y_train_salary)
    model_salary = grid_search_cv.best_estimator_
    model_salary.fit(X_train_salary, y_train_salary)
    y_pred_salary = model_salary.predict(X_test_salary)
    score_salary = model_salary.score(X_test_salary, y_test_salary)

    feature_importances = pd.DataFrame(
        {
            "features": X_test_salary.columns,
            "feature_importances": model_salary.feature_importances_,
        }
    ).sort_values(by="feature_importances", ascending=False)

    return (
        model_salary,
        X_test_salary,
        y_test_salary,
        y_pred_salary,
        score_salary,
        feature_importances,
    )


if __name__ == "__main__":

    # ? –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–∞–π–¥–±–∞—Ä–µ
    progress_bar = st.sidebar.progress(0)
    status_text = st.sidebar.empty()
    st.sidebar.button("Rerun")

    #! –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å hh.ru
    # –ù–æ–º–µ—Ä —Ä–∞–±–æ—Ç—ã: 1 - "Data Analyst" 2 - "Data Scientist" 3 - "Data Engineer"
    job_number = 1
    # –ú—ã –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–ª–∏ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö @st.cache_data
    df = download_data(job_number=job_number)

    status_text.text(f"{10}% complete - –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å hh.ru")
    progress_bar.progress(10)
    time.sleep(0.05)

    #! –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î MySQL
    # –ú—ã –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–ª–∏ –∑–∞–ø–∏—Å—å –≤ –ë–î, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ @st.cache_data
    db_connect_append.db_append(df)

    #! –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    df = begin_dataset(df)
    df = analysis_pandas_city(df)
    SALARY_MOSCOW = 161000  # –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤ –ú–æ—Å–∫–≤–µ
    df = analysis_pandas_salary(df, avg_salary_in_Moscow=SALARY_MOSCOW)
    df = analysis_pandas_date(df)
    df = analysis_pandas_experience(df)
    df, wordcloud = analysis_pandas_skills(df)
    df = analysis_pandas_role(df)
    df, is_define = final_dataset(df)
    status_text.text(f"{50}% complete - –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞")
    progress_bar.progress(50)
    time.sleep(0.05)

    #! –û–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–∏
    # –ú—ã –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π @st.cache_data
    model_role, X_test_role, y_test_role, y_pred_role, _ = model_it_role(is_define)
    model_salary, X_test_salary, y_test_salary, y_pred_salary, _, _ = model_salary(df)

    status_text.text(f"{100}% complete - –æ–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–∏")
    progress_bar.progress(100)
    time.sleep(0.05)

    #! UI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.title("–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ SQL + Docker + Python + Streamlit")
    st.markdown(
        """
        –ü—Ä–æ–µ–∫—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π:
        1. –ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞ hh.ru —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –ø–æ DA/DS/DE –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–≤–∏–ª–∫–∞, —Å–∫–∏–ª—ã, –≥–æ—Ä–æ–¥ –∏ —Ç.–ø.) –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö MySQL
        2. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π (*–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è* –∏ *–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å —Å —Å–µ—Ç–∫–æ–π –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤*) –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–≤–æ–µ–π –ò–¢-—Ä–æ–ª–∏ –∏ –±—É–¥–µ—Ç –ª–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π –ø–æ –ú–æ—Å–∫–≤–µ.
        3. –û–±–µ—Ä–Ω—É—Ç–æ —ç—Ç–æ –≤–æ Streamlit + c –ø—Ä–æ—Å—Ç—ã–º UI
        4. –í—Å–µ —Å–æ–±—Ä–∞–Ω–æ —á–µ—Ä–µ–∑ docker. 
        –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç –ø–æ —Å–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö + SQL –∫–æ–º–∞–Ω–¥–∞–º + Python + Streamlit + docker, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ML –Ω–∞ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö + –í –∏—Ç–æ–≥–µ –±—É–¥–µ—à—å –∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –º–Ω–µ –ø–ª–∞—Ç–∏—Ç—å –ø—Ä–∏ —Å–æ–±–µ—Å–µ –∏ –∫–∞–∫–æ–π —É –º–µ–Ω—è —É—Ä–æ–≤–µ–Ω—å
    """
    )

    # ? –ü–æ—Å—Ç—Ä–æ–∏–º —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞—é—Ç —á—É–≤–∞–∫–∏ –æ—Ç –¥–∂—É–Ω–∞ –¥–æ —Å–µ–Ω—å—ë—Ä–∞
    st.header("1. –ü–æ—Å—Ç—Ä–æ–∏–º —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞—é—Ç —á—É–≤–∞–∫–∏ –æ—Ç –¥–∂—É–Ω–∞ –¥–æ —Å–µ–Ω—å—ë—Ä–∞")
    df = role_name(df)
    st.scatter_chart(
        data=df.sort_values(by="role"),
        x="role_name",
        y="salary_avg",
        x_label="–ò–¢ —Ä–æ–ª—å",
        y_label="–ó–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±.)",
        size=300,
    )

    # ? –ü–æ—Å—Ç—Ä–æ–∏–º –û–±–ª–∞–∫–æ —Å–ª–æ–≤ —Å –≤–∞–∂–Ω—ã–º–∏ —Å–∫–∏–ª–ª–∞–º–∏
    st.header("2. –ü–æ—Å—Ç—Ä–æ–∏–º –û–±–ª–∞–∫–æ —Å–ª–æ–≤ —Å –≤–∞–∂–Ω—ã–º–∏ —Å–∫–∏–ª–ª–∞–º–∏")
    fig = plt.figure(figsize=(4, 4), facecolor=None)
    plt.imshow(wordcloud)
    plt.axis("off")
    plt.tight_layout(pad=0)
    st.pyplot(fig)

    # ? –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ò–¢ —Ä–æ–ª–∏ –∏ –ó–∞—Ä–ø–ª–∞—Ç—ã
    st.title("3. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ò–¢ —Ä–æ–ª–∏ –∏ –ó–∞—Ä–ø–ª–∞—Ç—ã")
    st.markdown(
        """
        –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã, –ò–¢ —Å–∫–∏–ª–ª—ã –∏ —Ç–µ–∫—É—â—É—é/–∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É
    """
    )

    # * –í–≤–µ–¥–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º—É
    form = st.form("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    # 1. –§–æ—Ä–º–∞: –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
    experiences_dict = {
        "–ù–µ—Ç –æ–ø—ã—Ç–∞": 0,
        "1 –≥–æ–¥": 1,
        "3 –≥–æ–¥–∞": 3,
        "–±–æ–ª–µ–µ 6 –ª–µ—Ç": 6,
    }
    options = list(experiences_dict.keys())
    value_exp = form.select_slider("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", options=options)

    # 2. –§–æ—Ä–º–∞: –°–∫–∏–ª–ª—ã
    options = list(wordcloud.words_.keys())[:30]
    list_skills = form.pills(
        "–í—ã–±–µ—Ä–∏ –ò–¢ —Å–∫–∏–ª–ª—ã", options=options, selection_mode="multi"
    )

    # 3. –§–æ—Ä–º–∞: –ó–∞—Ä–ø–ª–∞—Ç–∞
    salary_want = form.number_input(
        "–ö–∞–∫—É—é –∑–∞—Ä–ø–ª–∞—Ç—É —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å?", value=SALARY_MOSCOW, step=10000
    )

    st.markdown(f"–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {value_exp}.")
    st.markdown(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ò–¢ —Å–∫–∏–ª–ª—ã: {list_skills}.")
    st.markdown(f"–¢–≤–æ—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {salary_want}.")

    # Now add a submit button to the form:
    form.form_submit_button("Submit")

    # * 1. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ò–¢ —Ä–æ–ª–∏

    input_value_role = {
        "salary_avg": [salary_want],
        "month": [12],
        "year": [2024],
        "responsibility": [value_skills(list_skills, wordcloud)],
        "experience_year": [experiences_dict[value_exp]],
        "salary_larger_then_avg": [int(salary_want > SALARY_MOSCOW)],
    }

    it_role_dict = {
        0: "0 —Å—Ç–∞–∂–µ—Ä",
        1: "1 –î–∂—É–Ω",
        2: "2 –ú–∏–¥–ª",
        3: "3 –°–µ–Ω—å–æ—Ä",
        4: "4 –ù–µ_–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã",
    }

    X_input_role = pd.DataFrame(data=input_value_role)
    y_output_role = it_role_dict[round(list(model_role.predict(X_input_role))[0])]

    st.title("3.1. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ò–¢ —Ä–æ–ª–∏")
    st.markdown("–¢–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ò–¢ —Ä–æ–ª–∏")
    st.dataframe(X_test_role)
    st.markdown("–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ: –Ω–∞–≤—ã–∫–∏, —Å–∫–∏–ª–ª—ã, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")
    st.dataframe(X_input_role)
    st.info(
        f"–ú—ã —É –í–∞–Ω–≥–∏ —Å–ø—Ä–æ—Å–∏–ª–∏: –ö–∞–∫–∞—è –±—É–¥–µ—Ç —É —Ç–µ–±—è –ò–¢ —Ä–æ–ª—å? - {y_output_role}.",
        icon="üë∂",
    )

    # * 2. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–∞—Ä–ø–ª–∞—Ç—ã
    input_value_salary = {
        "month": [12],
        "year": [2024],
        "responsibility": [value_skills(list_skills, wordcloud)],
        "experience_year": [experiences_dict[value_exp]],
        "role": [round(list(model_role.predict(X_input_role))[0])],
    }

    X_input_salary = pd.DataFrame(data=input_value_salary)
    y_output_salary = list(model_salary.predict(X_input_salary))[0]

    st.title("3.2. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–∞—Ä–ø–ª–∞—Ç—ã")
    st.markdown("–¢–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –±—É–¥–µ—Ç –ª–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π")
    st.dataframe(X_test_salary)
    st.markdown("–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ: –Ω–∞–≤—ã–∫–∏, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –ò–¢ —Ä–æ–ª—å")
    st.dataframe(X_input_salary)

    if y_output_salary == 1:
        st.success("–ó–∞—Ä–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ 161000", icon="‚úÖ")
        st.balloons()
    else:
        st.error("–ó–∞—Ä–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ 161000", icon="üö®")
